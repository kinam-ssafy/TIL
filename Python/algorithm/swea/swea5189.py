'''swea5189 전자카트 완전탐색 재귀
골프장 관리를 위해 전기 카트로 사무실에서 출발해 각 관리구역을 돌고 다시 사무실로 돌아와야 한다.

사무실에서 출발해 각 구역을 한 번씩만 방문하고 사무실로 돌아올 때의 최소 배터리 사용량을 구하시오.

각 구역을 이동할 때의 배터리 사용량은 표로 제공되며, 1번은 사무실을, 2번부터 N번은 관리구역 번호이다.

두 구역 사이도 갈 때와 올 때의 경사나 통행로가 다를 수 있으므로 배터리 소비량은 다를 수 있다.

N이 3인 경우 가능한 경로는 1-2-3-1, 1-3-2-1이며 각각의 배터리 소비량은 다음과 같이 계산할 수 있다.

e[1][2]+e[2][3]+e[3][1] = 18+55+18 = 91

e[1][3]+e[3][2]+e[2][1] = 34+7+48 = 89


[입력]

첫 줄에 테스트케이스의 수 T가 주어진다. 1<=T<=50

다음 줄부터 테스트 케이스의 별로 첫 줄에 N이 주어지고, 다음 줄부터 N개씩 N개의 줄에 걸쳐 100이하의 자연수가 주어진다. 3<=N<=10

[출력]

각 줄마다 "#T" (T는 테스트 케이스 번호)를 출력한 뒤, 답을 출력한다.
'''
#가능한 경로 [1, (N-1)! , 1] 



def d(n, sum, cnt):
    global N, min_sum
    if cnt == N-1:  # 경로 다 채워지면
        sum += arr[n][0]    #도착점 -> 시작점 더하고 
        min_sum = min(sum, min_sum) #더 낮은값 갱신
        return 
    
    for i in range(1, N):
        if not used[i]: #중복 제거 순열 구하기
            used[i] = 1
            d(i, sum + arr[n][i], cnt + 1)
            used[i] = 0



T = int(input())
for t in range(1, T+1):
    N = int(input())
    arr = [list(map(int, input().split())) for _ in range(N)]
    check = [1]
    
    used = [0] * (N)
    used[0] = 1
    min_sum = float('inf')
    d(0, 0, 0)

    print(f"#{t} {min_sum}")
    


    
