'''swea1219 길찾기
그림과 같이 도식화한 지도에서 A도시에서 출발하여 B도시로 가는 길이 존재하는지 조사하려고 한다.
길 중간 중간에는 최대 2개의 갈림길이 존재하고, 모든 길은 일방 통행으로 되돌아오는 것이 불가능하다.
다음과 같이 길이 주어질 때, A도시에서 B도시로 가는 길이 존재하는지 알아내는 프로그램을 작성하여라.
 - A와 B는 숫자 0과 99으로 고정된다.
 - 모든 길은 순서쌍으로 나타내어진다. 위 예시에서 2번에서 출발 할 수 있는 길의 표현은 (2, 5), (2, 9)로 나타낼 수 있다.
 - 가는 길의 개수와 상관없이 한가지 길이라도 존재한다면 길이 존재하는 것이다.
 - 단 화살표 방향을 거슬러 돌아갈 수는 없다.

 [제약 사항]
출발점은 0, 도착점은 99으로 표현된다.
정점(분기점)의 개수는 98개(출발점과 도착점 제외)를 넘어가지 않으며, 한 개의 정점에서 선택할 수 있는 길의 개수도 2개를 넘어가지 않는다.

[입력]
총 10개의 테스트 케이스가 주어진다.
각 테스트 케이스의 첫 줄에는 테스트 케이스의 번호와 길의 총 개수가 공백으로 분리되어 주어진다.
그 다음 줄에는 순서쌍이 주어진다. 순서쌍의 경우, 별도로 나누어 표현되는 것이 아니라 숫자의 나열이며, 나열된 순서대로 순서쌍을 이룬다.

[출력]
#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스에 대한 답(가능 여부)을 출력한다.
가능할 경우 1, 불가능할 경우 0을 출력한다.

'''

# 1. 리스트는 0~99번까지 있으면 됨
# 2.


for t in range(1, 11):
    #테스트 케이스 번호, 길의 총 개수
    T, N = map(int, input().split())
    #순서쌍이 숫자의 나열로 입력됨
    nodes = list(map(int, input().split()))
    #그래프의 연결 관계를 저장하는 인접 리스트(adjacency list)
    #인덱스 번호 = 출발 도시 / 리스트에 담긴 값 = 도착할 수 있는 도시
    #(0, 1) 순서쌍 >> adj_lst[0].append(1)
    #(2, 5) 순서쌍 >> adj_lst[2].append(5) 이런식
    adj_lst = [[] for _ in range(100)]

    #노드로 들어온 순서쌍을 a, b로 나누어서 받음
    for i in range(N):
        a, b = nodes[i * 2], nodes[i * 2 + 1]
        adj_lst[a].append(b)

    #되돌아갈 위치를 기억할 stack 선언
    stack = []
    visited = [0] * 100
    v = 0
    result = 0
    #0번 인덱스 = 출발점이므로, 방문했다고 표시
    visited[v] = 1

    while not result: #목표 지점(99번 도시) 도착할 때까지 반복
        for w in adj_lst[v]:
            if visited[w] == 0:
                stack.append(v)
                v = w
                visited[v] = 1 #방문했으므로 1할당
                if visited[99] == 1: #목표지점 방문
                    result = 1
                    break
                #다음 길 탐색 방지
                break
        else: #break문으로 중단되지 않고 모든 반복을 정상적으로 마치면 실행되는 블록
            if stack: #되돌아갈 곳 있으면
                v = stack.pop()#마지막에 갔던 곳 재할당
            else:
                break

    print(f"#{t} {result}")


